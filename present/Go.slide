Go and Databases
An Introduction

HernÃ¡n Rondelli
Universidad Nacional de General Sarmiento
lucifer.unix.cabj@gmail.com

* bit.ly/go-and-db

.image img/go-and-db.png

* What is Go?

* What is Go?

- Created at Google by Ken Thompson, Rob Pike, and Robert Griesemer
- Compiled
- Garbage Collected

.image img/gopher.png
.caption Gopher

* C family

Go

.play src/for.go /START OMIT/,/STOP OMIT/

C

.code src/for.c /START OMIT/,/STOP OMIT/

_maaasoomeeenoâ€¦_

* Family tree

- ALGOL60
- Pascal â†’ Modula-2 â†’ Oberon â†’ Oberon-2
- CPS â†’ Squeak â†’ Newsqueak â†’ Alef
- C

*"C*+*Pascal*+*Concurrency"*

* Hello, world!

Code

.play src/hello.go

Compile and Run

	$ go run hello.go

Code formatting

	$ gofmt -d hello.go
	$ gofmt -w hello.go

* Data Types

- Basic types: `int`, `float`, `complex`, `boolean`, `string`, `rune`

- Composite types: `arrays`, `slices`, `maps`, `structs`

- Reference types: `pointers`, `slices`, `maps`, `functions`

- Interface types

* Basic Types

Declarations

	var i int
	var x float64
	var z complex128
	var ok bool
	var s string
	var c rune

Declarations with type inference

	var i  = 0
	var x  = 0.0
	var z  = 0 + 0i

	var (
		ok = true
		s  = "hello"
		c  = 'ðŸ˜¸'
	)

* Short Variable Declarations

	i := 0
	x := 0.0
	z := 0 + 0i
	ok := true
	s := "hello"
	c := 'ðŸ˜¸'

* Composite types

Array

	var a [5]int
	b := [5]int{0, 2, 4, 6, 8}

Slice

	var s0 []int
	s1 := []int{1, 2, 3}

Map

	var m map[string]int

â€¦

* Composite types: structs

*privado*

	type punto struct {
		x, y int
	}

*PÃºblico*

	type Persona struct {
		Nombre   string
		Apellido string
		Edad     int
	}

*ðŸ¤”*

	type Cuenta struct {
		nÃºmeroDeCuenta int
		monto          float64
	}

* Pointers

	var i *int
	j := new(int)

	k := 3.14
	p := &k

* Functions

.play src/add_sub.go /START OMIT/,

#* More Declarations

#	var a [10]*int
#	var b *[10]int
#	var c [10]map[string]int
#	var d []map[func(int) int]*struct{x, y int}

* if

.play src/if.go

if with initialization statement

.play src/if-init.go /START OMIT/,/STOP OMIT/

* for â€¦

Câ€“like

.play src/for-c.go

* for â€¦

whileâ€“like

.play src/for-while.go

* for range

for eachâ€“like

.play src/for-for-each.go

* Si se declara se usa

* Error: Declared and not used

No se puede dejar cosas sin usar, si se declara se usa

.code src/not_used.go

* Blank identifier

.play src/blank_identifier.go

* Data input

.code src/input.go

* Time format

Magic date: `2006-01-02T15:04:05`

.play src/time1.go

.play src/time2.go /START OMIT/,/STOP OMIT/

.play src/time3.go /START OMIT/,/STOP OMIT/

.play src/time4.go /START OMIT/,/STOP OMIT/

# Output

#2018-06-21 18:39:07.132136526 -0300 -03 m=+0.000336585
#21/06/2018
#hoy es 21 del 06 de 2018
#2018-06-21T18:39:07

* Time example

.play src/clock.go /START OMIT/,

* More info

# - Get started with Go â†’ [[https://golang.org/doc/tutorial/getting-started]]
# - Documentation â†’ [[https://golang.org/doc]]

- Get started with Go
.link https://golang.org/doc/tutorial/getting-started

- Documentation
.link https://golang.org/doc

# empty title
* 

.image img/questions.png
