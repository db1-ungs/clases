Go and Databases
An Introduction

Daniel Rondelli
Universidad Nacional de General Sarmiento
lucifer.unix.cabj@gmail.com

* bit.do/go-and-db

.image img/go-and-db.png

* What is Go?

* What is Go?

- Created at Google by Ken Thompson, Rob Pike, and Robert Griesemer
- Compiled
- Garbage Collected

.image img/gopher.png
.caption Gopher

* C family

Go

.play src/for.go /START OMIT/,/STOP OMIT/

C

.code src/for.c /START OMIT/,/STOP OMIT/

_maaasoomeeenoâ€¦_

* Family tree

- ALGOL60
- Pascal â†’ Modula-2 â†’ Oberon â†’ Oberon-2
- CPS â†’ Squeak â†’ Newsqueak â†’ Alef
- C

*"C*+*Pascal*+*Concurrency"*

* Hello, world!

Code

.play src/hello.go

Compile and Run

	$ go run hello.go

Code formatting

	$ gofmt -d hello.go
	$ gofmt -w hello.go

* Data Types

- Basic types: `int`, `float`, `complex`, `boolean`, `string`, `rune`

- Composite types: `arrays`, `slices`, `maps`, `structs`

- Reference types: `pointers`, `slices`, `maps`, `functions`

- Interface types

* Basic Types

Declarations

	var i int
	var x float64
	var z complex128
	var ok boolean
	var s string
	var c rune

Declarations with type inference

	var i  = 0
	var x  = 0.0
	var z  = 0 + 0i

	var (
		ok = true
		s  = "hello"
		c  = 'ðŸ˜¸'
	)

* Short Variable Declarations

	i := 0
	x := 0.0
	z := 0 + 0i
	ok := true
	s := "hello"
	c := 'ðŸ˜¸'

* Composite types

Array

	var a [5]int
	a := [5]int{0, 2, 4, 6, 8}

Slice

	var s []int
	s := []int{1, 2, 3}

Map

	var m map[string]int

â€¦

* Composite types

Struct

- privado

	type punto struct {
		x, y int
	}

- PÃºblico

	type Persona struct {
		Nombre string
		Edad   int
	}

* Pointers

	var i *int
	j := new(int)

	k := 3.14
	p := &k

* Functions

.play src/add_sub.go /START OMIT/,

#* More Declarations

#	var a [10]*int
#	var b *[10]int
#	var c [10]map[string]int
#	var d []map[func(int) int]*struct{x, y int}

* if

.play src/if.go

if with initialization statement

.play src/if-init.go /START OMIT/,/STOP OMIT/

* for â€¦

Câ€“like

.play src/for-c.go

* for â€¦

whileâ€“like

.play src/for-while.go

* for range

for eachâ€“like

.play src/for-for-each.go

* Si se declara se usa

* Error: Declared and not used

No se puede dejar cosas sin usar, si se declara se usa

.code src/not_used.go

* Blank identifier

.play src/blank_identifier.go

* Data input

.code src/input.go

* Time format

Magic date: `2006-01-02T15:04:05`

.play src/time1.go

.play src/time2.go /START OMIT/,/STOP OMIT/

.play src/time3.go /START OMIT/,/STOP OMIT/

.play src/time4.go /START OMIT/,/STOP OMIT/

# Output

#2018-06-21 18:39:07.132136526 -0300 -03 m=+0.000336585
#21/06/2018
#hoy es 21 del 06 de 2018
#2018-06-21T18:39:07

* Time example

.play src/clock.go /START OMIT/,

* Relational Databases in Go

* Relational Databases in Go

Install PostgreSQL driver

	$ go get github.com/lib/pq

Import declarations

	package main

	import (
		"database/sql"
		"fmt"
		_ "github.com/lib/pq"
		"log"
	)

	func main() {
		//...
	}

#* Databases in Go

* Database Connection

Open database connection

.code src/sql.go /B OPEN OMIT/,/E OPEN OMIT/

â€¦

* Database Connection

Create table

.code src/sql.go /B CREATE TABLE OMIT/,/E CREATE TABLE OMIT/

Insert into

.code src/sql.go /B INSERT INTO TABLE OMIT/,/E INSERT INTO TABLE OMIT/

â€¦

* Database Connection

.code src/sql.go /B ALUMNO OMIT/,/E ALUMNO OMIT/

Query

.code src/sql.go /B SELECT OMIT/,/E SELECT OMIT/

* Complete example

.code src/sql.go ,/B CREATEDATABASE OMIT

â€¦

* Complete example

.code src/sql.go /B CREATEDATABASE OMIT/,/E CREATEDATABASE OMIT/

â€¦

* Complete example

.code src/sql.go /func main/,/E INSERT INTO TABLE OMIT/

â€¦

* Complete example

.code src/sql.go /E INSERT INTO TABLE OMIT/,

* JSON

# empty title
* 

.image img/jason1.jpg _ 850
.caption *JSON*

# empty title
* 

.image img/jason2.jpg _ 500
.caption *JSON*

# empty title
* 

.image img/jason3.jpg _ 768
.caption *JSON*

# empty title
* 

.image img/jason4.jpg _ 800
.caption *JSON*

* JSON

- JSON (JavaScript Object Notation)
- Structured information
- Standard, universal support
- Simple
- Strings, numbers, booleans, arrays, and objects

* JSON data types to Go data types

- JSON numbers â†’ Go int's and float's

	626
	-273.15

- JSON booleans â†’ Go booleans

	false
	true

- JSON strings â†’ Go strings

	"Viva PerÃ³n"

- JSON arrays â†’ Go arrays, and slices

	["Viva", "PerÃ³n"]

* JSON data types to Go data types

- JSON objects â†’ Go structs

 {
     "Title": "Casablanca",
     "released": 1942,
     "Actors": [
         "Humphrey Bogart",
         "Ingrid Bergman"
     ]
 }

* JSON Document

`movies.json`

 [
     {
         "Title": "Casablanca",
         "released": 1942,
         "Actors": [
             "Humphrey Bogart",
             "Ingrid Bergman"
         ]
     },
     {
         "Title": "Lilo & Stitch",
         "released": 2002,
         "color": true,
         "Actors": [
             "Chris Sanders"
         ]
     }
 ]

* Encoding and Decoding JSON

- Marshaling (encoding)
Go â†’ JSON

- Unmarshaling (decoding)
JSON â†’ Go

* JSON example

.code src/json.go /package /,/Cristina OMIT

*â€¦*

* JSON example

.play src/json.go /Cristina OMIT/,/END OMIT

* NoSQL Databases in Go

* NoSQL Databases in Go (BoltDB)

- key/value store
- Embedded (no service)
- Database: *filename.db*
#- Bucket â‰ˆ `map[key]value`
- Bucket: *key*â†’*value*

Install BoltDB library

	$ go get github.com/coreos/bbolt/...

* Buckets: keyâ†’value

- alumne:

	1 â†’ {"legajo": 1, "nombre": "Cristina", "apellido": "Kirchner"}
	2 â†’ {"legajo": 2, "nombre": "Diego Armando", "apellido": "Maradona"}
	3 â†’ {"legajo": 3, "nombre": "Juan Carlos", "apellido": "Olave"}

* BoltDB

CaracterÃ­sticas

- Permite una Ãºnica transacciÃ³n de read/write (rw)
- Permite muchas transacciones read only (ro)

* BoltDB

- Import declarations

	package main

	import (
		"fmt"
		"log"

		bolt "github.com/coreos/bbolt"
	)

	func main() {
		db, err := bolt.Open("guaranÃ­.db", 0600, nil)
		if err != nil {
			log.Fatal(err)
		}
		defer db.Close()

		//...
	}

* Write to buckets

.code src/bolt.go /CREATE OMIT/,/READUNIQUE OMIT/

* Read from buckets

.code src/bolt.go /READUNIQUE OMIT/,

* Full code

.code src/bolt.go ,/FUNC OMIT/

* Full code (cont)

.code src/bolt.go /CREATE OMIT/,/READUNIQUE OMIT/

* Full code (cont)

.code src/bolt.go /READUNIQUE OMIT/,

* Full code (cont)

.code src/bolt.go /FUNC OMIT/,/CREATE OMIT/

# empty title
* 

.image img/questions.png
