Formas Normales

Ximena Ebertz
xebertz@campus.ungs.edu.ar

Hernán Rondelli
lucifer.unix.cabj@gmail.com

* db1-ungs.github.io/clases/com-1/norm.html

.image img/db1-ungs.github.io-clases-com-1-norm.html.png 500 _

* Motivación

Evaluar el diseño de los schemas, a partir del análisis de las dependencias funcionales

*Objetivos*

- Reconocer malos diseños en las relaciones

- Minimizar la redundancia, preservando la información
# Minimizar problemas de la manipulación de datos, en los inserts, deletes, updates

- Descomponer relaciones para mejorar el diseño

- Identificar ventajas y desventajas en el proceso de normalización

* Modelo relacional

* Modelo relacional

❌ schema

 alumne(legajo, nombre, apellido, materias_aprobadas)
        ──────

❌ instancia

 legajo | nombre   | apellido | materias_aprobadas
 -------+----------+----------+-------------------
    1   | Cristina | Kirchner | P1
    2   | Román    | Riquelme | {}
    3   | Diego    | Maradona | {P1, P2, P3}

*⚠︎*El*modelo*relacional*no*admite*atributos*multivaluados!*

* 1NF (Primera forma normal)

* 1NF

*Definición*

Una relación _R_ está en *1NF* si y solo si no tiene filas repetidas.

*Definición*alternativa*

Una relación _R_ está en *1NF* si y solo si tiene al menos una clave.

#*Aclaración:*

#Si pensamos a toda relación como un *conjunto* de tuplas, entonces *siempre* existe una clave. En ese caso, _toda_relación_está_en_1NF._

#Cuando pensamos en tablas _(nivel_físico)_, es posible que no exista una PK, y entonces _sí_pueden_existir_filas_duplicadas._

* 1NF

 legajo | nombre   | apellido | materias_aprobadas
 -------+----------+----------+-------------------
    1   | Cristina | Kirchner | P1
    2   | Román    | Riquelme | {}
    3   | Diego    | Maradona | {P1, P2, P3}

⬇

 alumne(legajo, nombre, apellido, materia_aprobada)
        ──────                    ────────────────

:

 legajo | nombre   | apellido | materia_aprobada
 -------+----------+----------+-----------------
    1   | Cristina | Kirchner | P1
    3   | Diego    | Maradona | P1
    3   | Diego    | Maradona | P2
    3   | Diego    | Maradona | P3

Ahora está en 1NF, sin embargo, (i) hay pérdida de información, (ii) hay redundancia, (iii) y la PK es muy esotérica

* 1NF

 alumne(legajo, nombre, apellido, materia_aprobada, semestre)
        ──────                    ────────────────

legajo → nombre
legajo → apellido
legajo materia_aprobada → semestre

 legajo | nombre   | apellido | materia_aprobada | semestre
 -------+----------+----------+------------------+---------
    1   | Cristina | Kirchner | P1               | 2023-2
    3   | Diego    | Maradona | P1               | 2021-2
    3   | Diego    | Maradona | P2               | 2022-1
    3   | Diego    | Maradona | P3               | 2023-1

Hay atributos que dependen solo de una parte de la clave

* 2NF (Segunda forma normal)

* Atributos primos y dependencias parciales

Dados (i) una relación _R_, (ii) un atributo _A_ ∈ _R_, y (iii) un conjunto de dependencias funcionales _F_ de _R_

- _A_ es *primo* ⇔ _A_ forma parte de alguna clave de _R_

- _X_ → _Y_ ∈ _F_, es *dependencia*parcial* ⇔ ∃ _Z_ ⊂ _X_ tal que _F_ ⊨ _Z_ → _Y_

- _Z_ *depende*parcialmente* de _X_ ⇔ _X_ → _Z_ es una dependencia parcial

* 2NF

*Definición*

Una relación _R_ está en 2NF si y solo si todo atributo no primo _A_, no depende parcialmente de ninguna clave de _R_.

*Definición*alternativa*

Una relación _R_ está en 2NF si y solo si todo atributo no primo _A_, depende completamente de todas las claves de _R_.

# i.e., no pueden existir atributos no primos que dependan solo de una parte de alguna clave.

* 2NF …

 alumne(legajo, nombre, apellido, materia_aprobada, semestre)
        ──────                    ────────────────

legajo → nombre
legajo → apellido
legajo materia_aprobada → semestre

 legajo | nombre   | apellido | materia_aprobada | semestre
 -------+----------+----------+------------------+---------
    1   | Cristina | Kirchner | P1               | 2023-2
    3   | Diego    | Maradona | P1               | 2021-2
    3   | Diego    | Maradona | P2               | 2022-1
    3   | Diego    | Maradona | P3               | 2023-1

__
__

❌ *No*está*en*2NF*

⬇

* … 2NF

⬇

 alumne(legajo, nombre, apellido)
        ────── 
:

 materia_aprobada(legajo, materia, semestre)
                  ──────  ───────

legajo → nombre
legajo → apellido
legajo materia → semestre

 legajo | nombre   | apellido                legajo | materia | semestre
 -------+----------+---------                -------+---------+---------
    1   | Cristina | Kirchner                   1   | P1      | 2023-2
    2   | Román    | Riquelme                   3   | P1      | 2021-2
    3   | Diego    | Maradona                   3   | P2      | 2022-1
                                                3   | P3      | 2023-1


✅ *Está*en*2NF*

* 2NF

 empleade(legajo, nombre, apellido, cp, localidad)
          ──────

legajo → nombre, apellido, cp
cp → localidad

 legajo | nombre       | apellido | cp    | localidad
 -------+--------------+----------+-------+------------
    1   | Cristina     | Kirchner | 1615  | Grand Bourg
    2   | Diego        | Maradona | 1665  | José C Paz
    3   | Juan Carlos  | Olave    | 1615  | Grand Bourg
    4   | María Eva    | Duarte   | 1615  | Grand Bourg
    5   | Román        | Riquelme | 1615  | Grand Bourg
    6   | Juan Domingo | Perón    | 1665  | José C Paz
    7   | Martín       | Palermo  | 1665  | José C Paz

La relación está en 2NF, pero hay redundancia

* 3NF (Tercera forma normal)

* 3NF

*Definición*

Una relación _R_ está en 3NF si y solo si:

- _R_ está en 2NF
- Todos los atributos no primos de _R_ no son transitivamente dependientes de ninguna clave de _R_

*Definición*alternativa*

Toda dependencia funcional no trivial X → A cumple al menos una de las siguientes condiciones:

- _X_ es superclave de _R_
- _A_ es primo

* 3NF …

 empleade(legajo, nombre, apellido, cp, localidad)
          ──────

legajo → nombre, apellido, cp
cp → localidad

 legajo | nombre       | apellido | cp    | localidad
 -------+--------------+----------+-------+------------
    1   | Cristina     | Kirchner | 1615  | Grand Bourg
    2   | Diego        | Maradona | 1665  | José C Paz
    3   | Juan Carlos  | Olave    | 1615  | Grand Bourg
    4   | María Eva    | Duarte   | 1615  | Grand Bourg
    5   | Román        | Riquelme | 1615  | Grand Bourg
    6   | Juan Domingo | Perón    | 1665  | José C Paz
    7   | Martín       | Palermo  | 1665  | José C Paz

❌ *No*está*en*3NF*

⬇

* … 3NF

⬇

 empleade(legajo, nombre, apellido, cp)                ciudad(cp, localidad)
          ──────                                              ──

legajo → nombre, apellido, cp
cp → localidad

 legajo | nombre       | apellido | cp                  cp    | localidad
 -------+--------------+----------+-----                ------+------------
    1   | Cristina     | Kirchner | 1615                1615  | Grand Bourg
    2   | Diego        | Maradona | 1665                1665  | José C Paz
    3   | Juan Carlos  | Olave    | 1615 
    4   | María Eva    | Duarte   | 1615 
    5   | Román        | Riquelme | 1615 
    6   | Juan Domingo | Perón    | 1665 
    7   | Martín       | Palermo  | 1665 

✅ *Está*en*3NF*

* BCNF (Forma normal de Boyce–Codd)

* BCNF

*Definición*

Una relación _R_ está en BCNF si y solo si en toda dependencia funcional no trivial _X_→_A_,
_X_ es superclave de _R_.

* BCNF …

 empleade(nro_legajo, sector, nro_empleade, cargo)
          ──────────

nro_legajo → sector nro_empleade cargo
sector nro_empleade → nro_legajo cargo
cargo → sector
 
 nro_legajo | sector      | nro_empleade | cargo
 -----------+-------------+--------------+-------------------
 23 456 789 | Sistemas    |       1      | Analiste funcional
 34 567 890 | Call Centre |       1      | Caller
 45 678 901 | Sistemas    |       2      | Programadore
 12 345 678 | Call Centre |       2      | Supervisore
 32 654 987 | Call Centre |       3      | Caller
 43 765 098 | Sistemas    |       3      | Programadore

✅ 3NF
❌ BCNF

* … BCNF …

 nro_legajo | sector      | nro_emp | cargo
 -----------+-------------+---------+-------------------
 23 456 789 | Sistemas    |    1    | Analiste funcional
 34 567 890 | Call Centre |    1    | Caller
 45 678 901 | Sistemas    |    2    | Programadore
 12 345 678 | Call Centre |    2    | Supervisore
 32 654 987 | Call Centre |    3    | Caller
 43 765 098 | Sistemas    |    3    | Programadore

⬇

 nro_legajo | nro_emp | cargo                       cargo              | sector
 -----------+---------+-------------------          -------------------+----------
 23 456 789 |    1    | Analiste funcional          Analiste funcional | Sistemas
 34 567 890 |    1    | Caller                      Project manager    | Sistemas
 45 678 901 |    2    | Programadore                Programadore       | Sistemas
 12 345 678 |    2    | Supervisore                 Caller             | Call Centre
 32 654 987 |    3    | Caller                      Supervisore        | Call Centre
 43 765 098 |    3    | Programadore

* … BCNF

 empleade(nro_legajo, sector, nro_empleade, cargo)
          ──────────
⬇

 empleade(nro_legajo, nro_emp, cargo)
          ──────────                 
:

 empleade(cargo, sector)
          ─────

*Observación:* Los schemas cumplen BCNF, pero en la normalización se perdió la dependencia *sector*nro_emp*→*cargo*

* Normalización

* Normalización

Dada una relación, se la _descompone_ en relaciones de menor redundancia

*Propiedades:*

- _Nonadditive_join_or_lossless_join_
# Al volver a unir las relaciones resultantes, no deben aparecer tuplas adicionales, que no estaban en la relación original.

- _Dependency_preservation_
# Cada una de las dependencias funcionales de la relación original, debe estar representada en alguna de las relaciones resultantes después de la descomposición

* Algoritmo para descomponer en 3NF

(1) Encontrar el cubrimiento minimal _G_ de _F_.

(2) Dadas _X_→_A₁,_X_→_A₂,_...,_ DF's de _G_, unirlas en _X_→_A₁A₂..._

(3) Para cada _X_→_Y_, crear una relación con atributos _(X,_Y)_, con _X_ clave.

(4) Si ninguna de las relaciones contiene una clave de _R_, crear una relación más, que contenga todos los atributos de una clave.
    
(5) Eliminar relaciones redundantes.

__
__
__
__
__

_Garantiza_Nonadditive_join_or_lossless_join_y_Dependency_preservation._

# *Observación*:

# Este algoritmo garantiza que la descomposición cumpla con las propiedades *dependency*preservation* y *nonadditive*join*

* Pseudo–algoritmo para descomponer en BCNF

(1) Calcular [super]claves y DF's de _R(A,_B,_X)_.

(2) Tomar alguna _A_→_B_ que viola BCNF.

(3) Descomponer _R_ en _R₁(A,_B)_ y _R₂(A,_X)_.

(4) Si quedan dependencias en _R₂_ que violan BCNF, _R₂_ pasa a ser el nuevo _R_ y go to (1)

* One more thing…

* BCNF ⇒ 3NF ⇒ 2NF ⇒ 1NF

* Bibliografía

Elmasri and Navathe, _Fundamentals_of_database_systems_

- Secciones 14.3, 14.4, y 14.5

# empty title
*

.image img/questions.png
