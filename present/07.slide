Stored Procedures & Triggers

Daniel Rondelli
Universidad Nacional de General Sarmiento
lucifer.unix.cabj@gmail.com

* This presentation

.image img/ungs-db1-sp.png
.caption bit.do/ungs-db1-sp

* Stored Procedures

* Stored Procedures

/st…îÀêd pr…ôÀàsiÀêd í…ôz/

- L√≥gica en la base de datos
- *Funciones* que se ejecutan en el server
- Procedural Language: variables, `if`, `while`, `for`, ‚Ä¶
- PostgreSQL: PL/pgSQL, PL/TCL, PL/Perl, PL/Python, ‚Ä¶

* PL/pgSQL

* PL/pgSQL

- PL (Procedural Language) by default
- Oracle PL/SQL Clone
- Basado en Ada

* PL/pgSQL

Estructura de una funci√≥n

 create function nombre(par1 tipo1, par2 tipo2,‚Ä¶, parN tipoN) returns tipoR as $$
 declare
     variable1 tipo1;
     ‚Ä¶
     variableM tipoM;
 begin
     /* statements */
 end;
 $$ language plpgsql;

* PL/pgSQL

hello, world!

 create function hello() returns void as $$
 begin
     raise notice 'hello, world!';
 end;
 $$ language plpgsql;

suma(a, b)

 create or replace function suma(a int, b int) returns int as $$
 declare
     c int;
 begin
     c := a + b;
     return c;
 end;
 $$ language plpgsql;

* PL/pgSQL

hello, world!

 postgres=# select hello();
 NOTICE:  hello, world!
  hello
 -------

 (1 row)

suma(a, b)

 postgres=# select suma(2, 3);
  suma
 ------
     5
 (1 row)

* PL/pgSQL

declaration

 legajo     int;
 nombre     text;
 fecha      date;
 estudiante alumno%rowtype;
 c√≥digo     materia.cod%type;
 fila       record;

assignment

 variable := valor;

if

 if condici√≥n then
     /* statements */
 else
     /* statements */
 end if;

* PL/pgSQL

while

 while condici√≥n loop
     /* statements */
 end loop

for (integer)

 for i in 1..n loop
     /* statements */
 end loop;

for (query)

 for v in select * from tabla loop
     /* statements */
 end loop;

* PL/pgSQL

extras

- `select`into`variable`[‚Ä¶]`
- `found`, `row_count`
- existen muchas cosas m√°s‚Ä¶ üòâ

 ‚Ä¶
 declare
     nombre_completo text;
     resultado record;
 begin
     select * into resultado from alumno where legajo = 626;

     if not found then
         raise 'legajo inv√°lido';
     end if;

     nombre_completo := resultado.nombre || resultado.apellido;
 ‚Ä¶

* Ejercicios de Stored Procedures

1. Escribir una funcioÃÅn que reciba un n√∫mero de legajo y que devuelva el nombre del alumno.

2. Escribir una funcioÃÅn que reciba un mid, un bid y una fecha, y que realice una reserva. Si ese bote no estuviera libre, debe buscar otro bote libre del mismo color y reservarlo.

3. Escribir una funcioÃÅn que reciba un marino y que diga si alquil√≥ todos los botes.

4. Escribir una funcioÃÅn que reciba dos bebedores y que muestre todos los bares que sirven todas las cervezas que le gustan a esos dos bebedores.

* Triggers

* Triggers

/Ààtr…™…°…ôz/

Funci√≥n que se ejecuta autom√°ticamente

 for event in database:
     if condition:
         do action

- Mover l√≥gica al DBMS
- Trabajar con constraints

* Triggers

Eventos

 insert on tabla
 delete on tabla
 update on tabla

Activaci√≥n

 before | after | instead of evento

Row-level

 for each row

Statement-level

 for each statement

* Triggers

Implementaciones

- PostgreSQL: full standard
- SQLite: row-level only
- MySQL: row-level only, m√°s limitaciones

* PostgreSQL Triggers‚Ä¶

1. Necesitamos una funci√≥n que implemente el comportamiento

- Procedural Language: variables, `if`, `while`, `for`, ‚Ä¶
- *PL/pgSQL*, PL/TCL, PL/Perl, PL/Python, ‚Ä¶

2. Definimos el trigger que use la funci√≥n creada

* PostgreSQL Triggers

Funci√≥n sin par√°metros que devuelve trigger

 create function funci√≥n_trigger() returns trigger as $$
 declare
     variable1 tipo1;
     ‚Ä¶
     variableM tipoM;
 begin
     /* statements */
 end;
 $$ language plpgsql;

Creaci√≥n del trigger

 create trigger nombre_del_trigger
 after insert on tabla
 for each row
 execute procedure funci√≥n_trigger();

#Eliminar

# drop trigger nombre_del_trigger on tabla;

* Ejemplo

Trigger Function

 create or replace function cambio_de_nombre() returns trigger as $$
 begin
     if new.nombre != old.nombre then
         insert into alerta values (old.id, old.name);
     end if;
     return new;
 end;
 $$ language plpgsql;

Trigger

 create trigger cambio_de_nombre_trigger
 before update on usuario
 for each row
 execute procedure cambio_de_nombre();

Update

 update usuario set name = 'Juan Domingo Per√≥n' where id = 626;

* Ejercicios de Triggers

1. Cada vez que se inserte un nuevo bebedor en la tabla frecuenta, se debe insertar a ese bebedor en la tabla gusta asociado a la cerveza Quilmes.

2. Si un marino tiene puntaje mayor √≥ igual a 100, se deben ingresar sus datos en una nueva tabla top_marino con el mismo schema que la tabla marino. El trigger debe dispararse tanto para insert, como update.

3. Cada vez que un marino alquile un barco, debe borrarse el registro de la tabla reserva. Se supone que todos los marinos primero reservan el barco, y despu√©s lo alquilan.

4. Cada vez que un marino alquile todos los botes, insertar su datos en la tabla cliente_vip (si todav√≠a no est√° insertado en esa tabla).

# empty title
* 

.image img/questions.png
